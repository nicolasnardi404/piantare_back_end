// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(FARMER)
  bio       String?  // Optional bio field
  imageUrl  String?  // Optional profile image URL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  plantLocations PlantLocation[] // Plants added by this user
  company        Company?        @relation(fields: [companyId], references: [id])
  companyId      Int?

  @@map("users")
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  description String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users          User[]          // Users associated with this company
  plantLocations PlantLocation[] // Plants assigned to this company

  @@map("companies")
}

model PlantLocation {
  id          Int      @id @default(autoincrement())
  latitude    Float
  longitude   Float
  plantedAt   DateTime @default(now())
  description String?
  imageUrl    String?  // URL to the plant image in Supabase storage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  plant     Plant    @relation(fields: [plantId], references: [id])
  plantId   Int
  addedBy   User    @relation(fields: [userId], references: [id])
  userId    Int
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  updates   PlantUpdate[] // Updates for this plant

  @@map("plant_locations")
}

model PlantUpdate {
  id           Int          @id @default(autoincrement())
  notes        String?
  imageUrl     String?      // URL to the update image in Supabase storage
  healthStatus HealthStatus @default(HEALTHY)
  measurements Json?        // Store height, width, and additional notes as JSON
  updateDate   DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relationships
  plant    PlantLocation @relation(fields: [plantId], references: [id], onDelete: Cascade)
  plantId  Int

  @@map("plant_updates")
}

enum UserRole {
  FARMER
  COMPANY
  ADMIN
}

enum HealthStatus {
  HEALTHY
  NEEDS_ATTENTION
  SICK
}

enum PlantCategory {
  ARVORES
  ARVORES_FRUTIFERAS
  CAPINS
  FOLHAGENS_ALTAS
  ARBUSTOS
  TREPADEIRAS
  AROMATICAS_E_COMESTIVEIS
  PLANTAS_DE_FORRACAO
  PLANTAS_AQUATICAS_OU_PALUSTRES
}

model Plant {
  id             Int            @id @default(autoincrement())
  nomePopular    String
  nomeCientifico String
  origem         String?
  altura         String?
  especificacao  String?
  categoria      PlantCategory
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relationships
  locations      PlantLocation[]

  @@map("plants")
}
