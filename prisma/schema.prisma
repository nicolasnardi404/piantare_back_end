// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(FARMER)
  bio       String?  
  imageUrl  String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  company   Company?        
  farmer    Farmer?         

  @@map("users")
}

model Company {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  plantedPlants  PlantedPlant[] // Company can sponsor multiple planted plants

  @@map("companies")
}

model Farmer {
  id        Int      @id @default(autoincrement())
  farmSize  Float?   // Size in hectares or relevant unit
  location  String?
  expertise String[] // Types of farming expertise
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @unique
  projects Project[] // Farmer can have multiple projects

  @@map("farmers")
}

model Project {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  status          ProjectStatus @default(IN_PROGRESS)
  startDate       DateTime @default(now())
  endDate         DateTime?
  areaCoordinates Json?    // Array of [lat, lng] pairs forming a polygon
  mapImageUrl     String?  // URL to the stored satellite map image
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Core relationship - Project MUST belong to a Farmer
  farmerId        Int
  farmer          Farmer   @relation(fields: [farmerId], references: [id])

  // Plants in this project
  plantGroups     PlantGroup[]

  @@map("projects")
}

model PlantSpecies {
  id              Int            @id @default(autoincrement())
  commonName      String         // was nomePopular
  scientificName  String         // was nomeCientifico
  origin          String?        // was origem
  height          String?        // was altura
  specification   String?        // was especificacao
  category        PlantCategory  // was categoria
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Add PlantGroup relation
  plantGroups     PlantGroup[]
  @@map("plant_species")
}

model PlantedPlant {
  id            Int          @id @default(autoincrement())
  latitude      Float
  longitude     Float
  plantedAt     DateTime     @default(now())
  plantGroupId  Int
  plantGroup    PlantGroup   @relation(fields: [plantGroupId], references: [id])
  companyId     Int?
  company       Company?     @relation(fields: [companyId], references: [id])

  @@map("planted_plants")
}

model PlantUpdate {
  id                Int               @id @default(autoincrement())
  height            Float
  diameter          Float
  healthStatus      HealthStatus      @default(HEALTHY)
  imageUrl          String?      
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  plantGroupUpdateId Int
  plantGroupUpdate   PlantGroupUpdate @relation(fields: [plantGroupUpdateId], references: [id])
  @@map("plant_updates")
}

model PlantGroup {
  id              Int                 @id @default(autoincrement())
  speciesId       Int
  species         PlantSpecies        @relation(fields: [speciesId], references: [id])
  projectId       Int
  project         Project             @relation(fields: [projectId], references: [id])
  plantedPlants   PlantedPlant[]
  groupUpdates    PlantGroupUpdate[]  // <-- Each update session for this group
  successionStage SuccessionStage     @default(PIONEER)
  @@map("plant_groups")
}

model PlantGroupUpdate {
  id           Int           @id @default(autoincrement())
  plantGroupId Int
  plantGroup   PlantGroup    @relation(fields: [plantGroupId], references: [id])
  plantUpdates PlantUpdate[] // <-- All plant measurements in this session
  // Add any additional fields as needed (e.g., date, notes)
  @@map("plant_group_updates")
}

enum UserRole {
  FARMER
  COMPANY
  ADMIN
}

enum HealthStatus {
  HEALTHY
  NEEDS_ATTENTION
  SICK
}

enum PlantCategory {
  TREES               // was ARVORES
  FRUIT_TREES         // was ARVORES_FRUTIFERAS
  GRASSES            // was CAPINS
  TALL_FOLIAGE       // was FOLHAGENS_ALTAS
  SHRUBS             // was ARBUSTOS
  CLIMBING_PLANTS    // was TREPADEIRAS
  AROMATIC_AND_EDIBLE // was AROMATICAS_E_COMESTIVEIS
  GROUND_COVER       // was PLANTAS_DE_FORRACAO
  AQUATIC_OR_MARSH   // was PLANTAS_AQUATICAS_OU_PALUSTRES
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum SuccessionStage {
  PIONEER
  SECONDARY
  CLIMAX
}


